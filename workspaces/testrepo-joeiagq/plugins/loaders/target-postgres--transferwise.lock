{
  "plugin_type": "loaders",
  "name": "target-postgres",
  "namespace": "postgres_transferwise",
  "variant": "transferwise",
  "label": "Postgres Warehouse",
  "repo": "git+https://github.com/Matatika/pipelinewise-target-postgres@v0.1.0",
  "pip_url": "git+https://github.com/Matatika/pipelinewise-target-postgres@v0.1.0",
  "description": "Loader for Postgres Data Warehouse\n\nThe World's Most Advanced Open Source Relational Database\n\n## Settings\n\n### User\nPostgres user\n\n### Password\nPostgres password\n\n### Host\nPostgres host\nExample: `test-host.db.elephantsql.com`\n\n### Port\nPostgres port\nExample: `5432`\n\n### Database Name\nPostgres database name\n\n### Default Target Schema\nName of the schema where tables will be created (no database prefix)",
  "logo_url": "https://localhost:3443/assets/logos/loaders/postgres.png",
  "settings": [
    {
      "name": "user",
      "aliases": [
        "username"
      ],
      "kind": "string",
      "label": "User",
      "description": "PostgreSQL user",
      "protected": false,
      "required": "true"
    },
    {
      "name": "password",
      "kind": "password",
      "label": "Password",
      "description": "PostgreSQL password",
      "protected": false,
      "required": "true"
    },
    {
      "name": "host",
      "aliases": [
        "address"
      ],
      "kind": "string",
      "label": "Host",
      "description": "PostgreSQL host",
      "protected": false,
      "required": "true"
    },
    {
      "name": "port",
      "kind": "integer",
      "value": 5432,
      "label": "Port",
      "description": "PostgreSQL port",
      "protected": false,
      "required": "true"
    },
    {
      "name": "dbname",
      "aliases": [
        "database"
      ],
      "kind": "string",
      "label": "Database Name",
      "description": "PostgreSQL database name",
      "protected": false,
      "required": "true"
    },
    {
      "name": "default_target_schema",
      "kind": "string",
      "value": "analytics",
      "label": "Default Target Schema",
      "description": "Name of the schema where the tables will be created.",
      "protected": false,
      "required": "true"
    },
    {
      "name": "ssl",
      "kind": "hidden",
      "value": false,
      "label": "SSL",
      "protected": false,
      "value_post_processor": "stringify"
    },
    {
      "name": "batch_size_rows",
      "kind": "integer",
      "value": 100000,
      "label": "Batch Size Rows",
      "description": "Maximum number of rows in each batch. At the end of each batch, the rows in the batch are loaded into Postgres.",
      "protected": false
    },
    {
      "name": "underscore_camel_case_fields",
      "kind": "hidden",
      "value": true,
      "label": "Underscore Camel Case Fields",
      "description": "Enable underscoring camel case field names, make the resulting postgres column names the same as from the Meltano variant of target-postgres.",
      "protected": false
    },
    {
      "name": "flush_all_streams",
      "kind": "hidden",
      "value": false,
      "label": "Flush All Streams",
      "description": "Flush and load every stream into Postgres when one batch is full. Warning: This may trigger the COPY command to use files with low number of records.",
      "protected": false
    },
    {
      "name": "parallelism",
      "kind": "hidden",
      "value": 0,
      "label": "Parallelism",
      "description": "The number of threads used to flush tables. 0 will create a thread for each stream, up to parallelism_max. -1 will create a thread for each CPU core. Any other positive number will create that number of threads, up to parallelism_max.",
      "protected": false
    },
    {
      "name": "parallelism_max",
      "kind": "hidden",
      "value": 16,
      "label": "Max Parallelism",
      "description": "Max number of parallel threads to use when flushing tables.",
      "protected": false
    },
    {
      "name": "default_target_schema_select_permission",
      "kind": "hidden",
      "label": "Default Target Schema Select Permission",
      "description": "Grant USAGE privilege on newly created schemas and grant SELECT privilege on newly created tables to a specific role or a list of roles. If `schema_mapping` is not defined then every stream sent by the tap is granted accordingly.",
      "protected": false
    },
    {
      "name": "schema_mapping",
      "kind": "hidden",
      "label": "Schema Mapping",
      "description": "Useful if you want to load multiple streams from one tap to multiple Postgres schemas.\n\nIf the tap sends the `stream_id` in `<schema_name>-<table_name>` format then this option overwrites the `default_target_schema` value.\nNote, that using `schema_mapping` you can overwrite the `default_target_schema_select_permission` value to grant SELECT permissions to different groups per schemas or optionally you can create indices automatically for the replicated tables.\n",
      "protected": false
    },
    {
      "name": "add_metadata_columns",
      "kind": "hidden",
      "value": true,
      "label": "Add Metadata Columns",
      "description": "Metadata columns add extra row level information about data ingestions, (i.e. when was the row read in source, when was inserted or deleted in postgres etc.) Metadata columns are creating automatically by adding extra columns to the tables with a column prefix `_SDC_`. The column names are following the stitch naming conventions documented at https://www.stitchdata.com/docs/data-structure/integration-schemas#sdc-columns. Enabling metadata columns will flag the deleted rows by setting the `_SDC_DELETED_AT` metadata column. Without the `add_metadata_columns` option the deleted rows from singer taps will not be recongisable in Postgres.",
      "protected": false
    },
    {
      "name": "hard_delete",
      "kind": "hidden",
      "value": false,
      "label": "Hard Delete",
      "description": "When `hard_delete` option is true then DELETE SQL commands will be performed in Postgres to delete rows in tables. It's achieved by continuously checking the `_SDC_DELETED_AT` metadata column sent by the singer tap. Due to deleting rows requires metadata columns, `hard_delete` option automatically enables the `add_metadata_columns` option as well.",
      "protected": false
    },
    {
      "name": "data_flattening_max_level",
      "kind": "hidden",
      "value": 10,
      "label": "Data Flattening Max Level",
      "description": "Object type RECORD items from taps can be transformed to flattened columns by creating columns automatically. When value is 0 (default) then flattening functionality is turned off.",
      "protected": false
    },
    {
      "name": "primary_key_required",
      "kind": "boolean",
      "value": false,
      "label": "Primary Key Required",
      "description": "Log based and Incremental replications on tables with no Primary Key cause duplicates when merging UPDATE events. When set to true, stop loading data if no Primary Key is defined.",
      "protected": false
    },
    {
      "name": "validate_records",
      "kind": "boolean",
      "value": false,
      "label": "Validate Records",
      "description": "Validate every single record message to the corresponding JSON schema. This option is disabled by default and invalid RECORD messages will fail only at load time by Postgres. Enabling this option will detect invalid records earlier but could cause performance degradation.",
      "protected": false
    },
    {
      "name": "temp_dir",
      "kind": "hidden",
      "label": "Temporary Directory",
      "description": "(Default: platform-dependent) Directory of temporary CSV files with RECORD messages.",
      "protected": false
    }
  ]
}