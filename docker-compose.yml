version: '3.7'

services:
  catalog:
    user: root
    image: matatika/catalog
    ports:
      - '8080:8080'
    deploy:
        resources:
            reservations:
              memory: 1g
            limits:
              memory: 3g
    tty: true
    environment:
      # Define DEVELOPMENT mode environments like debug settings etc
      - ACTIVE_PROFILES=default,local,distribution
      - "JAVA_OPTS=-XX:MaxDirectMemorySize=1G -XX:MaxMetaspaceSize=240234K -XX:ReservedCodeCacheSize=240M -Xss1M -Xms512m -Xmx1040584K"
      - SPRING_H2_CONSOLE_ENABLED=false
      - PERSISTENCE_CATALOG_URL=jdbc:postgresql://db:5432/warehouse
      - PERSISTENCE_CATALOG_USER=warehouse
      - PERSISTENCE_CATALOG_PASS=warehouse
      - PERSISTENCE_CATALOG_DRIVER_CLASS_NAME=org.postgresql.Driver
      - MATATIKA_DATAFLOW_NETWORK=matatika
      - MATATIKA_DATAFLOW_VOLUME_MOUNTS=project:/project
      - ELASTICSEARCH_HOST=search
      - MATATIKA_WORKSPACE_DIRS=/project
      # Generate a 256-bit (32-char) secret key and set it here. This is used to generate access tokens for the Matatika App and API.
      - MATATIKA_AUTH_LOCAL_SECRET=matatikaauthlocalsecret_changeme
    depends_on: {"search-setup": {"condition": "service_completed_successfully"}, "search": {"condition": "service_healthy"}, "db": {"condition": "service_healthy"}}
    healthcheck:
      test: curl -s http://localhost:8080/api/actuator/health | grep "UP" >/dev/null; if [[ $$? == 0 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    entrypoint: >
      /bin/bash -c "
        wget --no-check-certificate -P /tmp/ https://get.docker.com/builds/Linux/x86_64/docker-latest.tgz && tar -xvf /tmp/docker-latest.tgz --directory /tmp/ && mv /tmp/docker/docker /usr/local/bin;
        echo 'Docker installed'
        /docker-entrypoint.sh server"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - project:/project

  app:
    user: root
    image: matatika/app
    ports:
      - '3080:80'
      - '3443:443'
    tty: true
    environment:
      # Define DEVELOPMENT mode environments like debug settings etc
      - REACT_APP_ENV=distribution
    depends_on: {"catalog": {"condition": "service_healthy"}}
    entrypoint: >
      /bin/bash -c "
        /app/docker-entrypoint.sh app"

  search:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
    environment:
      - ES_HOME=/usr/share/elasticsearch
      - ELASTIC_PASSWORD=${MATATIKA_ES_ELASTIC_PASSWORD:-ChangeMe}
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - node.name=search
      - discovery.seed_hosts=
      - cluster.initial_master_nodes=search
      - xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/search/search.key
      - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/search/search.crt
      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt
      - xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/search/search.key
      - xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/search/search.crt
      - xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/ca/ca.crt
    volumes:
      - ./orchestrate/matatika/elastic-search/config/elasticsearch-docker.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - es-certs:/usr/share/elasticsearch/config/certs
      - es-data:/usr/share/elasticsearch/data
    expose:
      - "9200"
    ports:
      - "9200:9200"
    healthcheck:
      test: curl --cacert config/certs/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on: {"search-createcerts": {"condition": "service_completed_successfully"}}

  # Short lived container that sets up elastic search
  search-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
    environment:
      - ES_HOME=/usr/share/elasticsearch
      - ES_PATH_CONF=/usr/share/elasticsearch/config
      - MATATIKA_ES_BASE_URI=https://search:9200
      - MATATIKA_ES_ELASTIC_PASSWORD=${MATATIKA_ES_ELASTIC_PASSWORD:-ChangeMe}
    command: >
      bash -c '
        ls -al /usr/share/elasticsearch/config/certs
        . config/setup.sh
      '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes:
      - ./orchestrate/matatika/elastic-search/config:/usr/share/elasticsearch/config/
      - es-certs:/usr/share/elasticsearch/config/certs
    depends_on: {"search": {"condition": "service_healthy"}}

  # Short lived container that creates the certificates
  search-createcerts:
    container_name: search-createcerts
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
    environment:
      - ES_HOME=/usr/share/elasticsearch
    command: >
      bash -c '
        #!/bin/bash
        rm -fR /certs/*
        elasticsearch-certutil cert \
          --silent \
          --pem \
          --in config/instances.yml \
          -out /certs/bundle.zip;
        unzip /certs/bundle.zip -d /certs;
        # create CA for clients to verify certificates
        chown -R 1000:0 /certs
      '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes:
      - ./orchestrate/matatika/elastic-search/config/instances-dev.yml:/usr/share/elasticsearch/config/instances.yml
      - es-certs:/certs

  logstash:
    image: docker.elastic.co/logstash/logstash:7.16.3
    restart: always
    expose:
      - "5000"
    ports:
      -        "5000:5000"
      ## these ports enable send of our local syslog events to logstash (useful for debugging)
      # nc localhost 514 < /var/log/syslog
      - "514:5000"
      - "514:5000/udp"
    environment:
      - ELASTICSEARCH_HOSTS=https://search:9200
      - MATATIKA_ES_ELASTIC_PASSWORD=${MATATIKA_ES_ELASTIC_PASSWORD:-ChangeMe}
    volumes:
      # Mount local config directory to detect logstash grok changes dynamically
      - ./orchestrate/matatika/elastic-logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./orchestrate/matatika/elastic-logstash/pipeline:/usr/share/logstash/pipeline
      - es-certs:/etc/certs
    depends_on: {"search-setup": {"condition": "service_completed_successfully"}, "search": {"condition": "service_healthy"}}

  db:
    image: postgres:11
    container_name: db
    volumes:
      - matatika-catalog_postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: warehouse
      POSTGRES_PASSWORD: warehouse
      POSTGRES_USER: warehouse
    expose:
      - "5432"
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U warehouse"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  matatika-catalog_postgres:
  es-data:
    driver: local
  es-certs:
  project:
    name: project
    driver: local
    driver_opts:
      type: none
      device: ${PWD}
      o: bind

networks:
  default:
    name: matatika
